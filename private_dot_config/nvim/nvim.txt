################
# init.lua
# /home/ahmed/.config/nvim/init.lua
################
require("config")
vim.defer_fn(function()
  require("lazy").setup("plugins")
end, 100) -- Delay plugin setup by 100ms
################
# README.md
# /home/ahmed/.config/nvim/README.md
################
# Neovim Config

Welcome to my NeoVim config. Use it for inspiration.

## plugins

[comment.nvim](https://github.com/numToStr/Comment.nvim) - Commenting  
[copilot](https://github.com/zbirenbaum/copilot.lua) - Github copilot integration  
[lazy.nvim](https://github.com/folke/lazy.nvim) - Plugin manager  
[gitsigns](https://github.com/lewis6991/gitsigns.nvim) - Git status signs  
[indent-blankline](https://github.com/lukas-reineke/indent-blankline.nvim) - Indentation UI  
[lspconfig](https://github.com/neovim/nvim-lspconfig) - Language Server Protocol support  
[lspsaga](https://github.com/glepnir/lspsaga.nvim) - Enhanced LSP support  
[lualine](https://github.com/nvim-lualine/lualine.nvim) - Statusline  
[mason-lspconfig](https://github.com/williamboman/mason-lspconfig.nvim) - Better mason and lsp-config integration  
[efm-langserver](https://github.com/mattn/efm-langserver) - Linting and Formatting  
[mason](https://github.com/williamboman/mason.nvim) - LSP installation management  
[nightfox](https://github.com/EdenEast/nightfox.nvim) - nightfox colourscheme  
[noice](https://github.com/folke/noice.nvim) - vim commandline ui  
[nvim-autopairs](https://github.com/windwp/nvim-autopairs) - autopair completion  
[nvim-cmp](https://github.com/hrsh7th/nvim-cmp) - auto-completion support  
[nvim-tree](https://github.com/nvim-tree/nvim-tree.lua) - file tree explorer  
[nvim-web-devicons](https://github.com/nvim-tree/nvim-web-devicons) - file icons  
[telescope](https://github.com/nvim-telescope/telescope.nvim) - fuzzy finder  
[tmux-navigator](https;//github.com/christoomey/vim-tmux-navigator) - tmux window navigation  
[trouble](https://github.com/folke/trouble.nvim) - diagnostics  
[vim-illuminate](https://github.com/RRethy/vim-illuminate) - illuminates instances of word under cursor  
[whichkey](https://github.com/folke/which-key.nvim) - shortcut hints

## neovim version supported

^0.10.0

## author

Radley E. Sidwell-Lewis
################
# startup.log
# /home/ahmed/.config/nvim/startup.log
################
--- Startup times for process: Primary/TUI ---

times in msec
 clock   self+sourced   self:  sourced script
 clock   elapsed:              other lines

000.001  000.001: --- NVIM STARTING ---
000.685  000.684: event init
001.003  000.317: early init
001.205  000.202: locale set
001.431  000.225: init first window
002.520  001.090: inits 1
002.549  000.029: window checked
002.559  000.010: parsing arguments
004.515  000.151  000.151: require('vim.shared')
004.863  000.173  000.173: require('vim.inspect')
005.068  000.152  000.152: require('vim._options')
005.075  000.534  000.209: require('vim._editor')
005.080  000.793  000.108: require('vim._init_packages')
005.086  001.735: init lua interpreter
006.940  001.854: --- NVIM STARTED ---

--- Startup times for process: Embedded ---

times in msec
 clock   self+sourced   self:  sourced script
 clock   elapsed:              other lines

000.002  000.002: --- NVIM STARTING ---
000.925  000.923: event init
001.298  000.373: early init
001.542  000.244: locale set
001.785  000.244: init first window
003.032  001.246: inits 1
003.097  000.065: window checked
003.109  000.012: parsing arguments
005.098  000.145  000.145: require('vim.shared')
005.449  000.174  000.174: require('vim.inspect')
005.651  000.151  000.151: require('vim._options')
005.658  000.538  000.213: require('vim._editor')
005.662  000.883  000.200: require('vim._init_packages')
005.676  001.683: init lua interpreter
005.952  000.276: expanding arguments
006.035  000.084: inits 2
007.233  001.198: init highlight
007.238  000.005: waiting for UI
007.798  000.561: done waiting for UI
007.844  000.045: clear screen
008.118  000.040  000.040: require('vim.keymap')
010.425  002.571  002.531: require('vim._defaults')
010.438  000.024: init default mappings & autocommands
012.649  000.181  000.181: sourcing /snap/nvim/3456/usr/share/nvim/runtime/ftplugin.vim
012.945  000.123  000.123: sourcing /snap/nvim/3456/usr/share/nvim/runtime/indent.vim
016.057  002.097  002.097: require('config.globals')
018.493  002.422  002.422: require('config.options')
019.094  000.273  000.273: require('util.keymapper')
021.665  003.158  002.885: require('config.keymaps')
022.002  000.322  000.322: require('config.autocmds')
022.202  000.187  000.187: require('config.helpers')
022.727  000.512  000.512: require('lazy')
022.830  000.051  000.051: require('ffi')
023.239  000.308  000.308: require('vim.fs')
023.739  000.480  000.480: require('vim.uri')
023.789  000.946  000.159: require('vim.loader')
024.359  000.492  000.492: require('lazy.stats')
024.740  000.301  000.301: require('lazy.core.util')
025.307  000.559  000.559: require('lazy.core.config')
026.187  000.395  000.395: require('lazy.core.handler')
027.811  000.208  000.208: require('lazy.pkg')
027.827  001.074  000.867: require('lazy.core.meta')
027.846  001.651  000.577: require('lazy.core.plugin')
027.862  002.547  000.501: require('lazy.core.loader')
029.187  000.186  000.186: require('lazy.core.fragments')
032.666  000.103  000.103: require('util.icons')
033.212  000.173  000.173: require('util.lsp')
036.999  000.172  000.172: require('lazy.core.handler.event')
037.128  000.121  000.121: require('lazy.core.handler.cmd')
037.533  000.398  000.398: require('lazy.core.handler.keys')
037.767  000.227  000.227: require('lazy.core.handler.ft')
039.996  000.286  000.286: sourcing /snap/nvim/3456/usr/share/nvim/runtime/filetype.lua
040.265  000.040  000.040: sourcing /home/ahmed/.local/share/nvim/lazy/nightfox.nvim/plugin/nightfox.vim
040.894  000.063  000.063: require('nightfox.lib.collect')
041.063  000.076  000.076: require('nightfox.util')
041.234  000.335  000.259: require('nightfox.config')
041.245  000.949  000.551: require('nightfox.palette')
041.317  000.069  000.069: require('nightfox.override')
041.539  000.105  000.105: require('nightfox.lib.color')
041.599  000.057  000.057: require('nightfox.lib.shade')
041.743  000.422  000.260: require('nightfox.palette.carbonfox')
041.857  000.109  000.109: require('nightfox')
041.963  000.057  000.057: require('nightfox.lib.hash')
829.755  787.729  787.729: require('nightfox.lib.log')
863.710  017.964  017.964: require('nightfox.lib.highlight')
863.743  033.959  015.995: require('nightfox.lib.compiler')
864.371  000.285  000.285: require('nightfox.util.template')
864.388  000.632  000.348: require('nightfox.spec')
880.546  015.060  015.060: require('nightfox.group')
897.631  017.050  017.050: require('nightfox.group.editor')
927.390  029.704  029.704: require('nightfox.group.syntax')
953.864  026.035  026.035: require('nightfox.group.modules.alpha')
993.086  039.113  039.113: require('nightfox.group.modules.aerial')
1009.759  016.552  016.552: require('nightfox.group.modules.barbar')
1048.568  038.673  038.673: require('nightfox.group.modules.blink')
1076.697  027.775  027.775: require('nightfox.group.modules.cmp')
1094.153  017.237  017.237: require('nightfox.group.modules.coc')
1121.862  027.496  027.496: require('nightfox.group.modules.dap_ui')
1139.591  017.554  017.554: require('nightfox.group.modules.dashboard')
1155.908  016.100  016.100: require('nightfox.group.modules.diagnostic')
1173.108  017.034  017.034: require('nightfox.group.modules.fern')
1174.131  000.867  000.867: require('nightfox.group.modules.fidget')
1174.970  000.703  000.703: require('nightfox.group.modules.gitgutter')
1175.790  000.695  000.695: require('nightfox.group.modules.gitsigns')
1176.711  000.790  000.790: require('nightfox.group.modules.glyph_palette')
1177.967  000.904  000.904: require('nightfox.group.modules.hop')
1179.112  000.968  000.968: require('nightfox.group.modules.illuminate')
1180.178  000.893  000.893: require('nightfox.group.modules.indent_blankline')
1181.064  000.708  000.708: require('nightfox.group.modules.lazy')
1182.280  001.025  001.025: require('nightfox.group.modules.leap')
1183.333  000.881  000.881: require('nightfox.group.modules.lightspeed')
1184.871  001.313  001.313: require('nightfox.group.modules.lsp_saga')
1185.968  000.921  000.921: require('nightfox.group.modules.lsp_semantic_tokens')
1186.612  000.512  000.512: require('nightfox.group.modules.lsp_trouble')
1199.539  012.808  012.808: require('nightfox.group.modules.mini')
1200.538  000.789  000.789: require('nightfox.group.modules.modes')
1201.362  000.631  000.631: require('nightfox.group.modules.native_lsp')
1202.111  000.569  000.569: require('nightfox.group.modules.navic')
1202.827  000.542  000.542: require('nightfox.group.modules.neogit')
1203.527  000.520  000.520: require('nightfox.group.modules.neotest')
1204.285  000.584  000.584: require('nightfox.group.modules.neotree')
1205.152  000.571  000.571: require('nightfox.group.modules.notify')
1206.084  000.585  000.585: require('nightfox.group.modules.nvimtree')
1206.835  000.501  000.501: require('nightfox.group.modules.pounce')
1207.538  000.463  000.463: require('nightfox.group.modules.signify')
1208.415  000.499  000.499: require('nightfox.group.modules.sneak')
1209.321  000.670  000.670: require('nightfox.group.modules.symbol_outline')
1223.862  014.134  014.134: require('nightfox.group.modules.rainbow-delimiters')
1224.992  000.812  000.812: require('nightfox.group.modules.telescope')
1225.979  000.689  000.689: require('nightfox.group.modules.treesitter')
1226.800  000.518  000.518: require('nightfox.group.modules.tsrainbow')
1227.579  000.529  000.529: require('nightfox.group.modules.tsrainbow2')
1229.107  001.159  001.159: require('nightfox.group.modules.whichkey')
1230.336  000.629  000.629: require('nightfox.group.terminal')
1258.248  017.771  017.771: require('nightfox.palette.dawnfox')
1275.040  001.155  001.155: require('nightfox.palette.dayfox')
1288.227  000.995  000.995: require('nightfox.palette.duskfox')
1293.671  000.392  000.392: require('nightfox.palette.nightfox')
1299.425  000.761  000.761: require('nightfox.palette.nordfox')
1304.664  000.802  000.802: require('nightfox.palette.terafox')
1311.776  002.109  002.109: sourcing /home/ahmed/.local/share/nvim/lazy/nightfox.nvim/colors/carbonfox.vim
1311.994  000.075  000.075: sourcing /home/ahmed/.local/share/nvim/lazy/nvim-transparent/plugin/transparent.vim
1313.414  001.171  001.171: sourcing /home/ahmed/.local/share/nvim/lazy/vim-fugitive/plugin/fugitive.vim
1313.526  000.017  000.017: sourcing /home/ahmed/.local/share/nvim/lazy/vim-fugitive/ftdetect/fugitive.vim
1314.647  000.044  000.044: require('nvim-ts-autotag._log')
1314.756  000.105  000.105: require('nvim-ts-autotag.config.init')
1315.315  000.082  000.082: require('vim.treesitter.language')
1315.365  000.045  000.045: require('vim.func')
1315.411  000.041  000.041: require('vim.func._memoize')
1315.426  000.294  000.125: require('vim.treesitter.query')
1315.487  000.059  000.059: require('vim.treesitter._range')
1315.498  000.441  000.089: require('vim.treesitter.languagetree')
1315.504  000.566  000.125: require('vim.treesitter')
1315.539  000.647  000.081: require('nvim-ts-autotag.utils')
1315.543  000.696  000.050: require('nvim-ts-autotag.config.ft')
1315.546  000.787  000.091: require('nvim-ts-autotag.config.plugin')
1315.553  001.017  000.082: require('nvim-ts-autotag.internal')
1315.555  001.761  000.743: require('nvim-ts-autotag')
1316.454  000.060  000.060: require('nvim-treesitter.utils')
1317.656  001.198  001.198: require('nvim-treesitter.parsers')
1317.953  000.073  000.073: require('nvim-treesitter.compat')
1318.118  000.098  000.098: require('nvim-treesitter.ts_utils')
1318.126  000.170  000.072: require('nvim-treesitter.tsrange')
1318.186  000.057  000.057: require('nvim-treesitter.caching')
1318.198  000.409  000.109: require('nvim-treesitter.query')
1318.213  000.491  000.082: require('nvim-treesitter.configs')
1318.218  000.558  000.068: require('nvim-treesitter.info')
1318.314  000.094  000.094: require('nvim-treesitter.shell_command_selectors')
1318.351  002.044  000.133: require('nvim-treesitter.install')
1318.406  000.052  000.052: require('nvim-treesitter.statusline')
1318.471  000.063  000.063: require('nvim-treesitter.query_predicates')
1318.474  002.572  000.413: require('nvim-treesitter')
1319.056  003.200  000.628: sourcing /home/ahmed/.local/share/nvim/lazy/nvim-treesitter/plugin/nvim-treesitter.lua
1321.415  000.109  000.109: require('nvim-treesitter.highlight')
1321.557  000.094  000.094: require('nvim-treesitter.indent')
1321.766  000.101  000.101: require('nvim-treesitter.locals')
1321.775  000.182  000.081: require('nvim-treesitter.incremental_selection')
1321.782  006.225  002.640: require('nvim-treesitter')
1321.859  008.110  000.124: sourcing /home/ahmed/.local/share/nvim/lazy/nvim-ts-autotag/plugin/nvim-ts-autotag.lua
1322.688  000.064  000.064: require('illuminate.util')
1322.782  000.090  000.090: require('illuminate.config')
1322.956  000.170  000.170: require('illuminate.reference')
1322.967  000.428  000.104: require('illuminate.highlight')
1322.996  000.837  000.410: require('illuminate.engine')
1323.373  000.338  000.338: require('illuminate')
1323.605  001.559  000.384: sourcing /home/ahmed/.local/share/nvim/lazy/vim-illuminate/plugin/illuminate.vim
1323.982  000.126  000.126: sourcing /home/ahmed/.local/share/nvim/lazy/which-key.nvim/plugin/which-key.lua
1324.732  000.430  000.430: require('which-key')
1324.831  000.095  000.095: require('which-key.config')
1325.842  000.073  000.073: require('ibl.utils')
1325.850  000.142  000.069: require('ibl.config')
1325.948  000.043  000.043: require('ibl.indent')
1325.954  000.103  000.059: require('ibl.hooks')
1325.957  000.325  000.080: require('ibl.highlights')
1326.002  000.043  000.043: require('ibl.autocmds')
1326.048  000.044  000.044: require('ibl.inlay_hints')
1326.093  000.042  000.042: require('ibl.virt_text')
1326.286  000.151  000.151: require('ibl.scope_languages')
1326.290  000.194  000.043: require('ibl.scope')
1326.296  001.190  000.541: require('ibl')
1326.520  000.075  000.075: require('vim.iter')
1326.780  000.094  000.094: require('vim.lsp.log')
1327.176  000.392  000.392: require('vim.lsp.protocol')
1327.506  000.153  000.153: require('vim.lsp._snippet_grammar')
1327.564  000.053  000.053: require('vim.highlight')
1327.572  000.004  000.004: require('vim.F')
1327.585  000.404  000.194: require('vim.lsp.util')
1327.685  000.045  000.045: require('vim.lsp.sync')
1327.691  000.104  000.059: require('vim.lsp._changetracking')
1327.777  000.083  000.083: require('vim.lsp.rpc')
1327.874  001.294  000.217: require('vim.lsp')
1328.107  000.229  000.229: require('vim.lsp.handlers')
1328.607  000.099  000.099: sourcing /home/ahmed/.local/share/nvim/lazy/vim-tmux-navigator/plugin/tmux_navigator.vim
1329.092  000.047  000.047: require('nightfox.util.lualine')
1329.473  000.481  000.434: require('lualine.themes.nightfox')
1330.008  000.069  000.069: require('lualine_require')
1330.293  000.816  000.747: require('lualine')
1349.917  017.678  017.678: require('lualine.utils.mode')
1356.283  001.457  001.457: sourcing /home/ahmed/.local/share/nvim/lazy/vim-wakatime/plugin/wakatime.vim
1357.439  000.154  000.154: require('nvim-tree.log')
1357.885  000.106  000.106: require('nvim-tree.notify')
1357.897  000.286  000.181: require('nvim-tree.events')
1358.178  000.137  000.137: require('nvim-tree.iterators.node-iterator')
1358.219  000.319  000.183: require('nvim-tree.utils')
1358.244  000.800  000.194: require('nvim-tree.view')
1358.649  000.082  000.082: require('nvim-tree.core')
1358.878  000.122  000.122: require('nvim-tree.git.utils')
1358.954  000.072  000.072: require('nvim-tree.renderer.components.devicons')
1359.127  000.085  000.085: require('nvim-tree.classic')
1359.136  000.178  000.093: require('nvim-tree.node')
1359.190  000.537  000.166: require('nvim-tree.node.directory')
1359.194  000.717  000.098: require('nvim-tree.actions.finders.find-file')
1359.295  000.100  000.100: require('nvim-tree.actions.finders.search-node')
1359.299  000.931  000.114: require('nvim-tree.actions.finders')
1359.562  000.099  000.099: require('nvim-tree.node.file')
1359.567  000.190  000.091: require('nvim-tree.actions.fs.create-file')
1359.757  000.097  000.097: require('nvim-tree.lib')
1359.920  000.071  000.071: require('nvim-tree.node.link')
1360.009  000.248  000.177: require('nvim-tree.node.directory-link')
1360.019  000.450  000.105: require('nvim-tree.actions.fs.remove-file')
1360.128  000.106  000.106: require('nvim-tree.actions.fs.rename-file')
1360.231  000.100  000.100: require('nvim-tree.actions.fs.trash')
1360.236  000.936  000.089: require('nvim-tree.actions.fs')
1360.524  000.114  000.114: require('nvim-tree.diagnostics')
1360.530  000.217  000.103: require('nvim-tree.actions.moves.item')
1360.653  000.121  000.121: require('nvim-tree.actions.moves.parent')
1360.731  000.075  000.075: require('nvim-tree.actions.moves.sibling')
1360.735  000.496  000.083: require('nvim-tree.actions.moves')
1360.883  000.077  000.077: require('nvim-tree.actions.node.file-popup')
1361.083  000.197  000.197: require('nvim-tree.actions.node.open-file')
1361.269  000.183  000.183: require('nvim-tree.actions.node.run-command')
1361.436  000.163  000.163: require('nvim-tree.actions.node.system-open')
1361.576  000.137  000.137: require('nvim-tree.actions.node.buffer')
1361.579  000.842  000.086: require('nvim-tree.actions.node')
1361.881  000.178  000.178: require('nvim-tree.actions.root.change-dir')
1362.029  000.145  000.145: require('nvim-tree.actions.root.dir-up')
1362.033  000.452  000.129: require('nvim-tree.actions.root')
1362.456  000.225  000.225: require('nvim-tree.actions.tree.find-file')
1362.799  000.167  000.167: require('nvim-tree.actions.tree.modifiers.collapse-all')
1362.933  000.130  000.130: require('nvim-tree.actions.tree.modifiers.expand-all')
1362.936  000.477  000.180: require('nvim-tree.actions.tree.modifiers')
1363.051  000.113  000.113: require('nvim-tree.actions.tree.open')
1363.173  000.119  000.119: require('nvim-tree.actions.tree.toggle')
1363.255  000.080  000.080: require('nvim-tree.actions.tree.resize')
1363.259  001.224  000.210: require('nvim-tree.actions.tree')
1363.261  005.014  000.133: require('nvim-tree.actions')
1363.537  000.268  000.268: require('vim.diagnostic')
1363.566  006.936  000.700: require('nvim-tree')
1363.641  000.062  000.062: require('nvim-tree.legacy')
1364.123  000.078  000.078: require('nvim-tree.keymap')
1364.217  000.088  000.088: require('nvim-tree.appearance')
1365.021  000.054  000.054: require('nvim-tree.buffers')
1365.158  000.065  000.065: require('nvim-tree.git.runner')
1365.225  000.064  000.064: require('nvim-tree.watcher')
1365.232  000.207  000.079: require('nvim-tree.git')
1365.334  000.053  000.053: require('nvim-tree.node.file-link')
1365.338  000.103  000.050: require('nvim-tree.node.factory')
1365.386  000.047  000.047: require('nvim-tree.node.root')
1365.479  000.039  000.039: require('nvim-tree.enum')
1365.523  000.133  000.094: require('nvim-tree.explorer.filters')
1365.593  000.068  000.068: require('nvim-tree.marks')
1365.702  000.107  000.107: require('nvim-tree.explorer.live-filter')
1365.774  000.069  000.069: require('nvim-tree.explorer.sorter')
1365.902  000.087  000.087: require('nvim-tree.actions.fs.clipboard')
1366.133  000.062  000.062: require('nvim-tree.renderer.decorator')
1366.147  000.121  000.059: require('nvim-tree.renderer.decorator.bookmarks')
1366.222  000.073  000.073: require('nvim-tree.renderer.decorator.copied')
1366.274  000.048  000.048: require('nvim-tree.renderer.decorator.cut')
1366.328  000.052  000.052: require('nvim-tree.renderer.decorator.diagnostics')
1366.391  000.060  000.060: require('nvim-tree.renderer.decorator.git')
1366.439  000.045  000.045: require('nvim-tree.renderer.decorator.hidden')
1366.486  000.045  000.045: require('nvim-tree.renderer.decorator.modified')
1366.561  000.073  000.073: require('nvim-tree.renderer.decorator.opened')
1366.610  000.046  000.046: require('nvim-tree.renderer.decorator.user')
1366.700  000.087  000.087: require('nvim-tree.renderer.components.padding')
1366.733  000.769  000.118: require('nvim-tree.renderer.builder')
1366.741  000.835  000.066: require('nvim-tree.renderer')
1366.750  001.888  000.178: require('nvim-tree.explorer')
1366.807  000.055  000.055: require('nvim-tree.explorer.watch')
1366.914  000.050  000.050: require('nvim-tree.renderer.components.full-name')
1366.918  000.101  000.052: require('nvim-tree.renderer.components')
1367.186  000.046  000.046: sourcing /home/ahmed/.local/share/nvim/lazy/nvim-web-devicons/plugin/nvim-web-devicons.vim
1367.668  000.086  000.086: require('nvim-web-devicons.filetypes')
1367.877  000.150  000.150: require('nvim-web-devicons.default.icons_by_filename')
1368.228  000.347  000.347: require('nvim-web-devicons.default.icons_by_file_extension')
1368.320  000.089  000.089: require('nvim-web-devicons.default.icons_by_operating_system')
1368.372  000.049  000.049: require('nvim-web-devicons.default.icons_by_desktop_environment')
1368.424  000.049  000.049: require('nvim-web-devicons.default.icons_by_window_manager')
1368.426  000.745  000.061: require('nvim-web-devicons.icons-default')
1368.712  001.499  000.669: require('nvim-web-devicons')
1372.066  005.146  003.601: require('nvim-web-devicons')
1372.180  000.104  000.104: require('nvim-tree.help')
1372.349  000.069  000.069: require('nvim-tree.appearance.hi-test')
1372.415  000.231  000.162: require('nvim-tree.api')
1372.543  000.090  000.090: require('nvim-tree.commands')
1372.875  000.061  000.061: sourcing /home/ahmed/.local/share/nvim/lazy/lspsaga.nvim/plugin/lspsaga.lua
1373.279  000.374  000.374: require('lspsaga')
1373.522  000.103  000.103: require('lspsaga.lspkind')
1373.526  000.196  000.093: require('lspsaga.highlight')
1373.977  000.082  000.082: require('vim.version')
1377.941  002.307  002.307: require('lspsaga.util')
1378.075  004.274  001.885: require('lspsaga.codeaction.lightbulb')
1380.520  001.349  001.349: require('lspsaga.symbol.head')
1381.376  000.082  000.082: require('Comment.config')
1381.696  000.219  000.219: require('Comment.ft')
1381.706  000.326  000.107: require('Comment.utils')
1381.826  000.118  000.118: require('Comment.opfunc')
1381.905  000.076  000.076: require('Comment.extra')
1381.913  001.006  000.405: require('Comment.api')
1382.012  001.183  000.177: sourcing /home/ahmed/.local/share/nvim/lazy/Comment.nvim/plugin/Comment.lua
1382.155  000.078  000.078: require('Comment')
1383.263  000.115  000.115: require('nvim-autopairs._log')
1383.379  000.111  000.111: require('nvim-autopairs.utils')
1383.701  000.131  000.131: require('nvim-autopairs.conds')
1383.713  000.239  000.107: require('nvim-autopairs.rule')
1383.717  000.335  000.097: require('nvim-autopairs.rules.basic')
1383.728  001.036  000.476: require('nvim-autopairs')
1385.405  000.195  000.195: require('mason-core.path')
1386.108  000.478  000.478: require('mason-core.functional')
1386.570  000.222  000.222: require('mason-core.functional.data')
1386.602  000.461  000.238: require('mason-core.functional.function')
1386.814  000.184  000.184: require('mason-core.functional.relation')
1387.094  000.252  000.252: require('mason-core.functional.logic')
1387.187  001.777  000.402: require('mason-core.platform')
1387.452  000.263  000.263: require('mason.settings')
1387.456  002.960  000.726: require('mason')
1388.206  000.295  000.295: require('mason-core.functional.list')
1388.272  000.060  000.060: require('mason-core.functional.string')
1388.303  000.613  000.259: require('mason.api.command')
1388.371  000.063  000.063: require('mason-registry.sources')
1390.773  001.099  001.099: require('vim.filetype')
1391.999  000.047  000.047: require('luasnip.util.types')
1392.005  000.107  000.060: require('luasnip.util.ext_opts')
1392.173  000.042  000.042: require('luasnip.util.lazy_table')
1392.223  000.047  000.047: require('luasnip.extras.filetype_functions')
1392.233  000.171  000.082: require('luasnip.default_config')
1392.236  000.229  000.058: require('luasnip.session')
1392.239  000.969  000.633: require('luasnip.config')
1392.409  000.070  000.070: require('luasnip.util.util')
1392.573  000.047  000.047: require('luasnip.nodes.key_indexer')
1392.579  000.167  000.120: require('luasnip.nodes.util')
1392.686  000.045  000.045: require('luasnip.session.snippet_collection.source')
1392.730  000.040  000.040: require('luasnip.util.table')
1392.802  000.070  000.070: require('luasnip.util.auto_table')
1392.809  000.228  000.073: require('luasnip.session.snippet_collection')
1392.965  000.048  000.048: require('luasnip.util.select')
1393.008  000.040  000.040: require('luasnip.util.time')
1393.544  000.684  000.595: require('luasnip.util._builtin_vars')
1393.581  000.770  000.086: require('luasnip.util.environ')
1393.643  000.059  000.059: require('luasnip.util.extend_decorator')
1393.785  000.079  000.079: require('luasnip.util.path')
1393.918  000.072  000.072: require('luasnip.util.log')
1393.925  000.137  000.065: require('luasnip.loaders.util')
1393.971  000.045  000.045: require('luasnip.loaders.data')
1394.060  000.087  000.087: require('luasnip.loaders.fs_watchers')
1394.066  000.419  000.072: require('luasnip.loaders')
1394.082  001.833  000.119: require('luasnip')
1394.152  004.537  000.636: sourcing /home/ahmed/.local/share/nvim/lazy/LuaSnip/plugin/luasnip.lua
1394.239  000.033  000.033: sourcing /home/ahmed/.local/share/nvim/lazy/LuaSnip/plugin/luasnip.vim
1394.437  000.059  000.059: require('cmp.utils.api')
1394.529  000.042  000.042: require('cmp.types.cmp')
1394.634  000.050  000.050: require('cmp.utils.misc')
1394.688  000.157  000.106: require('cmp.types.lsp')
1394.736  000.044  000.044: require('cmp.types.vim')
1394.738  000.298  000.055: require('cmp.types')
1394.781  000.041  000.041: require('cmp.utils.highlight')
1394.863  000.039  000.039: require('cmp.utils.debug')
1394.871  000.088  000.050: require('cmp.utils.autocmd')
1395.267  000.945  000.459: sourcing /home/ahmed/.local/share/nvim/lazy/nvim-cmp/plugin/cmp.lua
1395.675  000.069  000.069: require('cmp.utils.char')
1395.683  000.129  000.060: require('cmp.utils.str')
1395.835  000.040  000.040: require('cmp.utils.buffer')
1395.846  000.112  000.072: require('cmp.utils.keymap')
1395.849  000.163  000.051: require('cmp.utils.feedkeys')
1396.012  000.054  000.054: require('cmp.config.mapping')
1396.057  000.042  000.042: require('cmp.utils.cache')
1396.180  000.053  000.053: require('cmp.config.compare')
1396.183  000.123  000.070: require('cmp.config.default')
1396.200  000.292  000.074: require('cmp.config')
1396.211  000.360  000.068: require('cmp.utils.async')
1396.301  000.039  000.039: require('cmp.utils.pattern')
1396.305  000.092  000.053: require('cmp.context')
1396.955  000.085  000.085: require('cmp.utils.snippet')
1397.008  000.049  000.049: require('cmp.matcher')
1397.015  000.212  000.079: require('cmp.entry')
1397.023  000.716  000.504: require('cmp.source')
1397.116  000.041  000.041: require('cmp.utils.event')
1397.254  000.038  000.038: require('cmp.utils.options')
1397.260  000.095  000.057: require('cmp.utils.window')
1397.262  000.143  000.049: require('cmp.view.docs_view')
1397.332  000.068  000.068: require('cmp.view.custom_entries_view')
1397.434  000.099  000.099: require('cmp.view.wildmenu_entries_view')
1397.535  000.061  000.061: require('cmp.view.native_entries_view')
1397.604  000.066  000.066: require('cmp.view.ghost_text_view')
1397.613  000.589  000.110: require('cmp.view')
1398.249  002.782  000.732: require('cmp.core')
1398.428  000.060  000.060: require('cmp.config.sources')
1398.478  000.046  000.046: require('cmp.config.window')
1398.533  003.234  000.346: require('cmp')
1398.598  000.063  000.063: require('lspkind')
1398.725  000.045  000.045: require('luasnip.session.enqueueable_operations')
1398.964  000.039  000.039: require('luasnip.util.events')
1398.974  000.108  000.068: require('luasnip.nodes.node')
1399.179  000.203  000.203: require('luasnip.nodes.insertNode')
1399.244  000.062  000.062: require('luasnip.nodes.textNode')
1399.300  000.052  000.052: require('luasnip.util.mark')
1399.346  000.044  000.044: require('luasnip.util.pattern_tokenizer')
1399.388  000.040  000.040: require('luasnip.util.dict')
1399.686  000.008  000.008: require('jsregexp.core')
1399.691  000.068  000.059: require('luasnip-jsregexp')
1399.693  000.248  000.180: require('luasnip.util.jsregexp')
1399.696  000.304  000.056: require('luasnip.nodes.util.trig_engines')
1399.733  000.956  000.144: require('luasnip.nodes.snippet')
1399.884  000.047  000.047: require('luasnip.util.parser.neovim_ast')
1399.931  000.045  000.045: require('luasnip.util.str')
1399.984  000.048  000.048: require('luasnip.util.directed_graph')
1399.989  000.201  000.061: require('luasnip.util.parser.ast_utils')
1400.048  000.057  000.057: require('luasnip.nodes.functionNode')
1400.142  000.092  000.092: require('luasnip.nodes.choiceNode')
1400.240  000.095  000.095: require('luasnip.nodes.dynamicNode')
1400.293  000.050  000.050: require('luasnip.util.functions')
1400.301  000.566  000.072: require('luasnip.util.parser.ast_parser')
1400.430  000.128  000.128: require('luasnip.util.parser.neovim_parser')
1400.444  001.716  000.066: require('luasnip.util.parser')
1400.506  000.060  000.060: require('luasnip.nodes.snippetProxy')
1400.673  000.163  000.163: require('luasnip.util.jsonc')
1400.825  000.091  000.091: require('luasnip.nodes.duplicate')
1400.829  000.152  000.061: require('luasnip.loaders.snippet_cache')
1400.837  002.236  000.100: require('luasnip/loaders/from_vscode')
1403.186  000.317  000.317: require('lspconfig.util')
1403.220  000.449  000.132: sourcing /home/ahmed/.local/share/nvim/lazy/nvim-lspconfig/plugin/lspconfig.lua
1404.364  001.114  001.114: require('neoconf')
1405.154  000.131  000.131: require('vim.health')
1405.159  000.790  000.659: require('neoconf.health')
1405.380  000.095  000.095: require('neoconf.config')
1405.394  000.233  000.138: require('neoconf.util')
1405.592  000.081  000.081: require('lspconfig.async')
1405.596  000.194  000.113: require('lspconfig.configs')
1405.686  000.072  000.072: require('neoconf.import')
1405.919  000.097  000.097: require('neoconf.settings')
1405.924  000.196  000.098: require('neoconf.commands')
1407.691  000.093  000.093: require('neoconf.plugins')
1407.789  000.093  000.093: require('neoconf.plugins.lspconfig')
1408.146  000.088  000.088: require('neoconf.schema')
1408.151  000.174  000.086: require('neoconf.plugins.jsonls')
1408.226  000.071  000.071: require('neoconf.plugins.lua_ls')
1408.419  000.101  000.101: require('cmp_nvim_lsp.source')
1408.425  000.195  000.094: require('cmp_nvim_lsp')
1408.525  000.098  000.098: require('lspconfig')
1408.643  000.087  000.087: require('lspconfig.configs.solidity_ls')
1409.322  000.127  000.127: require('lspconfig.manager')
1409.474  000.144  000.144: require('lspconfig.configs.lua_ls')
1413.501  000.231  000.231: require('lspconfig.configs.jsonls')
1413.976  000.232  000.232: require('lspconfig.configs.pyright')
1414.505  000.147  000.147: require('lspconfig.configs.bashls')
1414.920  000.220  000.220: require('lspconfig.configs.emmet_ls')
1415.711  000.142  000.142: require('lspconfig.configs.dockerls')
1416.041  000.157  000.157: require('lspconfig.configs.clangd')
1416.628  000.073  000.073: require('efmls-configs.utils')
1416.726  000.094  000.094: require('efmls-configs.fs')
1416.801  000.365  000.198: require('efmls-configs.linters.solhint')
1416.939  000.135  000.135: require('efmls-configs.formatters.prettier_d')
1417.063  000.121  000.121: require('efmls-configs.linters.luacheck')
1417.185  000.119  000.119: require('efmls-configs.formatters.stylua')
1417.295  000.107  000.107: require('efmls-configs.linters.flake8')
1417.532  000.234  000.234: require('efmls-configs.formatters.black')
1417.654  000.119  000.119: require('efmls-configs.linters.eslint')
1417.762  000.105  000.105: require('efmls-configs.formatters.fixjson')
1417.862  000.097  000.097: require('efmls-configs.linters.shellcheck')
1418.011  000.147  000.147: require('efmls-configs.formatters.shfmt')
1418.193  000.179  000.179: require('efmls-configs.linters.hadolint')
1418.295  000.100  000.100: require('efmls-configs.linters.cpplint')
1418.394  000.096  000.096: require('efmls-configs.formatters.clang_format')
1418.463  000.066  000.066: require('lspconfig.configs.efm')
1419.754  000.211  000.211: require('gitsigns.async')
1419.881  000.123  000.123: require('gitsigns.debug.log')
1420.285  000.400  000.400: require('gitsigns.config')
1420.298  001.534  000.799: require('gitsigns')
1420.662  000.296  000.296: require('gitsigns.highlight')
1421.513  000.114  000.114: require('gitsigns.debounce')
1421.920  000.089  000.089: sourcing /snap/nvim/3456/usr/share/nvim/runtime/plugin/editorconfig.lua
1422.209  000.194  000.194: sourcing /snap/nvim/3456/usr/share/nvim/runtime/plugin/gzip.vim
1422.466  000.184  000.184: sourcing /snap/nvim/3456/usr/share/nvim/runtime/plugin/man.lua
1423.345  000.259  000.259: sourcing /snap/nvim/3456/usr/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim
1423.371  000.856  000.597: sourcing /snap/nvim/3456/usr/share/nvim/runtime/plugin/matchit.vim
1423.625  000.201  000.201: sourcing /snap/nvim/3456/usr/share/nvim/runtime/plugin/matchparen.vim
1424.050  000.371  000.371: sourcing /snap/nvim/3456/usr/share/nvim/runtime/plugin/netrwPlugin.vim
1424.275  000.100  000.100: sourcing /snap/nvim/3456/usr/share/nvim/runtime/plugin/osc52.lua
1424.523  000.183  000.183: sourcing /snap/nvim/3456/usr/share/nvim/runtime/plugin/rplugin.vim
1424.664  000.074  000.074: sourcing /snap/nvim/3456/usr/share/nvim/runtime/plugin/shada.vim
1424.756  000.026  000.026: sourcing /snap/nvim/3456/usr/share/nvim/runtime/plugin/spellfile.vim
1424.947  000.111  000.111: sourcing /snap/nvim/3456/usr/share/nvim/runtime/plugin/tarPlugin.vim
1425.089  000.084  000.084: sourcing /snap/nvim/3456/usr/share/nvim/runtime/plugin/tohtml.lua
1425.166  000.026  000.026: sourcing /snap/nvim/3456/usr/share/nvim/runtime/plugin/tutor.vim
1425.384  000.171  000.171: sourcing /snap/nvim/3456/usr/share/nvim/runtime/plugin/zipPlugin.vim
1425.798  000.082  000.082: sourcing /home/ahmed/.local/share/nvim/lazy/cmp-nvim-lsp/after/plugin/cmp_nvim_lsp.lua
1427.276  000.341  000.341: require('cmp_buffer.timer')
1427.293  001.140  000.799: require('cmp_buffer.buffer')
1427.303  001.258  000.117: require('cmp_buffer.source')
1427.305  001.349  000.091: require('cmp_buffer')
1427.470  001.581  000.232: sourcing /home/ahmed/.local/share/nvim/lazy/cmp-buffer/after/plugin/cmp_buffer.lua
1427.806  000.225  000.225: sourcing /home/ahmed/.local/share/nvim/lazy/indent-blankline.nvim/after/plugin/commands.lua
1427.869  1414.502  109.855: require('config')
1427.880  1414.624  000.122: sourcing /home/ahmed/.config/nvim/init.lua
1427.896  002.529: sourcing vimrc file(s)
1428.665  000.194  000.194: sourcing /snap/nvim/3456/usr/share/nvim/runtime/filetype.lua
1429.014  000.084  000.084: sourcing /snap/nvim/3456/usr/share/nvim/runtime/syntax/synload.vim
1429.115  000.358  000.274: sourcing /snap/nvim/3456/usr/share/nvim/runtime/syntax/syntax.vim
1429.146  000.698: inits 3
1432.071  002.925: reading ShaDa
1433.011  000.526  000.526: require('luasnip.loaders.from_lua')
1433.540  000.523  000.523: require('luasnip.loaders.from_snipmate')
1434.231  000.686  000.686: require('luasnip.loaders.from_vscode')
1434.272  000.466: opening buffers
1437.308  003.035: BufEnter autocommands
1437.316  000.008: editing files in windows
1439.749  001.400  001.400: require('transparent.config')
1441.020  001.260  001.260: require('transparent.cache')
1441.163  003.696  001.036: require('transparent')
1442.315  001.049  001.049: require('illuminate.providers.lsp')
1442.902  000.539  000.539: require('illuminate.providers.treesitter')
1443.494  000.586  000.586: require('illuminate.providers.regex')
1444.102  000.916: VimEnter autocommands
1444.783  000.682: UIEnter autocommands
1445.721  000.543  000.543: sourcing /snap/nvim/3456/usr/share/nvim/runtime/autoload/provider/clipboard.vim
1445.735  000.409: before starting main loop
1445.961  000.034  000.034: sourcing /home/ahmed/.local/share/nvim/lazy/nvim-treesitter/autoload/nvim_treesitter.vim
1446.366  000.378  000.378: require('nvim-treesitter.fold')
1447.059  000.912: first screen update
1447.063  000.004: --- NVIM STARTED ---

################
# .luacheckrc
# /home/ahmed/.config/nvim/.luacheckrc
################
---@diagnostic disable: lowercase-global

ignore = {
  "111", -- setting non-standard global variable
  "212/_.*",  -- unused argument, for vars with "_" prefix
  "214", -- used variable with unused hint ("_" prefix)
  "121", -- setting read-only global variable 'vim'
  "122", -- setting read-only field of global variable 'vim'
}

-- Global objects defined by the C code
read_globals = {
  "vim",
}

################
# lazy-lock.json
# /home/ahmed/.config/nvim/lazy-lock.json
################
{
  "Comment.nvim": { "branch": "master", "commit": "e30b7f2008e52442154b66f7c519bfd2f1e32acb" },
  "LuaSnip": { "branch": "master", "commit": "03c8e67eb7293c404845b3982db895d59c0d1538" },
  "ansible-vim": { "branch": "master", "commit": "3329367d2e5f90d203c8d340c53fa83c60a1ad41" },
  "cmp-buffer": { "branch": "main", "commit": "b74fab3656eea9de20a9b8116afa3cfc4ec09657" },
  "cmp-nvim-lsp": { "branch": "main", "commit": "a8912b88ce488f411177fc8aed358b04dc246d7b" },
  "copilot.lua": { "branch": "master", "commit": "228cd7456fd923b8da3eb6497bb345de58b93637" },
  "csv.vim": { "branch": "master", "commit": "b8eb7f67babce96168e7f6b93b2ba8328b72a390" },
  "efmls-configs-nvim": { "branch": "main", "commit": "e071a098ac1e56e349af649c25e982348f5504e5" },
  "gitsigns.nvim": { "branch": "main", "commit": "17ab794b6fce6fce768430ebc925347e349e1d60" },
  "indent-blankline.nvim": { "branch": "master", "commit": "005b56001b2cb30bfa61b7986bc50657816ba4ba" },
  "lazy.nvim": { "branch": "main", "commit": "6c3bda4aca61a13a9c63f1c1d1b16b9d3be90d7a" },
  "lspkind.nvim": { "branch": "master", "commit": "d79a1c3299ad0ef94e255d045bed9fa26025dab6" },
  "lspsaga.nvim": { "branch": "main", "commit": "778d56ff9b387dacd14ae648ed5604394b486f51" },
  "lualine.nvim": { "branch": "master", "commit": "482ae358c67aec2a4939d68a1a4fe4c8064ccd16" },
  "markdown-preview.nvim": { "branch": "master", "commit": "a923f5fc5ba36a3b17e289dc35dc17f66d0548ee" },
  "mason-lspconfig.nvim": { "branch": "main", "commit": "1a31f824b9cd5bc6f342fc29e9a53b60d74af245" },
  "mason.nvim": { "branch": "main", "commit": "fc98833b6da5de5a9c5b1446ac541577059555be" },
  "neoconf.nvim": { "branch": "main", "commit": "498eed9e00677e4f1a8259db43b0e90f8662f38b" },
  "neodev.nvim": { "branch": "main", "commit": "46aa467dca16cf3dfe27098042402066d2ae242d" },
  "nightfox.nvim": { "branch": "main", "commit": "ba47d4b4c5ec308718641ba7402c143836f35aa9" },
  "noice.nvim": { "branch": "main", "commit": "0427460c2d7f673ad60eb02b35f5e9926cf67c59" },
  "nui.nvim": { "branch": "main", "commit": "8d3bce9764e627b62b07424e0df77f680d47ffdb" },
  "nvim-autopairs": { "branch": "master", "commit": "84a81a7d1f28b381b32acf1e8fe5ff5bef4f7968" },
  "nvim-cmp": { "branch": "main", "commit": "059e89495b3ec09395262f16b1ad441a38081d04" },
  "nvim-dap": { "branch": "master", "commit": "7aade9e99bef5f0735cf966e715b3ce45515d786" },
  "nvim-dap-python": { "branch": "master", "commit": "34282820bb713b9a5fdb120ae8dd85c2b3f49b51" },
  "nvim-dap-ui": { "branch": "master", "commit": "bc81f8d3440aede116f821114547a476b082b319" },
  "nvim-lspconfig": { "branch": "master", "commit": "3e873195f501b1e02d9fd7e5af5cbe74fc2f98c1" },
  "nvim-nio": { "branch": "master", "commit": "21f5324bfac14e22ba26553caf69ec76ae8a7662" },
  "nvim-notify": { "branch": "master", "commit": "22f29093eae7785773ee9d543f8750348b1a195c" },
  "nvim-transparent": { "branch": "main", "commit": "8a2749a2fa74f97fe6557f61b89ac7fd873f3c21" },
  "nvim-tree.lua": { "branch": "master", "commit": "c3c193594213c5e2f89ec5d7729cad805f76b256" },
  "nvim-treesitter": { "branch": "master", "commit": "523a9e148919f58eb5a013f76787e57696e00c93" },
  "nvim-ts-autotag": { "branch": "main", "commit": "a1d526af391f6aebb25a8795cbc05351ed3620b5" },
  "nvim-web-devicons": { "branch": "master", "commit": "4c3a5848ee0b09ecdea73adcd2a689190aeb728c" },
  "plenary.nvim": { "branch": "master", "commit": "857c5ac632080dba10aae49dba902ce3abf91b35" },
  "rust-tools.nvim": { "branch": "master", "commit": "676187908a1ce35ffcd727c654ed68d851299d3e" },
  "telescope-fzf-native.nvim": { "branch": "main", "commit": "1f08ed60cafc8f6168b72b80be2b2ea149813e55" },
  "telescope.nvim": { "branch": "master", "commit": "a4ed82509cecc56df1c7138920a1aeaf246c0ac5" },
  "trouble.nvim": { "branch": "main", "commit": "85bedb7eb7fa331a2ccbecb9202d8abba64d37b3" },
  "vim-dadbod": { "branch": "master", "commit": "9f0ca8bcef704659820a95c3bbd2c262583a66a1" },
  "vim-dadbod-ui": { "branch": "master", "commit": "685e75b34ee0e12f92ec4507ea8bb7f1aaa936e5" },
  "vim-eunuch": { "branch": "master", "commit": "e86bb794a1c10a2edac130feb0ea590a00d03f1e" },
  "vim-floaterm": { "branch": "master", "commit": "4e28c8dd0271e10a5f55142fb6fe9b1599ee6160" },
  "vim-fugitive": { "branch": "master", "commit": "4a745ea72fa93bb15dd077109afbb3d1809383f2" },
  "vim-helm": { "branch": "master", "commit": "ae1ebc160d2b9b90108477ab10df7a4fc501e358" },
  "vim-illuminate": { "branch": "master", "commit": "19cb21f513fc2b02f0c66be70107741e837516a1" },
  "vim-kubernetes": { "branch": "master", "commit": "d5fe1c319b994149b25c9bee1327dc8b3bebe4b7" },
  "vim-startify": { "branch": "master", "commit": "4e089dffdad46f3f5593f34362d530e8fe823dcf" },
  "vim-terraform": { "branch": "master", "commit": "8912ca1be3025a1c9fab193618f3b99517e01973" },
  "vim-tmux-navigator": { "branch": "master", "commit": "791dacfcfc8ccb7f6eb1c853050883b03e5a22fe" },
  "vim-wakatime": { "branch": "master", "commit": "e46d7c4f98ee0f40782008dd60cb2a79c377fb1d" },
  "which-key.nvim": { "branch": "main", "commit": "370ec46f710e058c9c1646273e6b225acf47cbed" }
}
################
# lsp.lua
# /home/ahmed/.config/nvim/lua/util/lsp.lua
################
local mapkey = require("util.keymapper").mapvimkey

local M = {}

M.on_attach = function(client, bufnr)
	local opts = { noremap = true, silent = true, buffer = bufnr }

	mapkey("<leader>fd", "Lspsaga finder", "n", opts) -- go to definition
	mapkey("<leader>gd", "Lspsaga peek_definition", "n", opts) -- peak definition
	mapkey("<leader>gD", "Lspsaga goto_definition", "n", opts) -- go to definition
	mapkey("<leader>gS", "vsplit | Lspsaga goto_definition", "n", opts) -- go to definition
	mapkey("<leader>ca", "Lspsaga code_action", "n", opts) -- see available code actions
	mapkey("<leader>rn", "Lspsaga rename", "n", opts) -- smart rename
	mapkey("<leader>D", "Lspsaga show_line_diagnostics", "n", opts) -- show  diagnostics for line
	mapkey("<leader>d", "Lspsaga show_cursor_diagnostics", "n", opts) -- show diagnostics for cursor
	mapkey("<leader>pd", "Lspsaga diagnostic_jump_prev", "n", opts) -- jump to prev diagnostic in buffer
	mapkey("<leader>nd", "Lspsaga diagnostic_jump_next", "n", opts) -- jump to next diagnostic in buffer
	mapkey("K", "Lspsaga hover_doc", "n", opts) -- show documentation for what is under cursor
  mapkey("gr", "Telescope lsp_references", "n", opts) -- Show references
  mapkey("<leader>ds", "Telescope lsp_document_symbols", "n", opts) -- Document symbols

	if client.name == "pyright" then
		mapkey("<leader>oi", "PyrightOrganizeImports", "n", opts) -- organise imports
		mapkey("<leader>db", "DapToggleBreakpoint", "n", opts) -- toggle breakpoint
		mapkey("<leader>dr", "DapContinue", "n", opts) -- continue/invoke debugger
		mapkey("<leader>dt", "lua require('dap-python').test_method()", "n", opts) -- run tests
	end

end

M.typescript_organise_imports = {
	description = "Organise Imports",
	function()
		local params = {
			command = "_typescript.organizeImports",
			arguments = { vim.fn.expand("%:p") },
		}
		-- reorganise imports
		vim.lsp.buf.execute_command(params)
	end,
}

return M
################
# icons.lua
# /home/ahmed/.config/nvim/lua/util/icons.lua
################
local M = {}

M.debugging_signs = {
	Stopped = { "󰁕 ", "DiagnosticWarn", "DapStoppedLine" },
	Breakpoint = " ",
	BreakpointCondition = " ",
	BreakpointRejected = { " ", "DiagnosticError" },
	LogPoint = ".>",
}

M.diagnostic_signs = {
	Error = " ",
	Warn = " ",
	Hint = "",
	Info = "",
}

return M
################
# keymapper.lua
# /home/ahmed/.config/nvim/lua/util/keymapper.lua
################
local vim_modes = {
	n = "n",
	i = "i",
	v = "v",
}

local default_opts = {
	noremap = true,
	silent = true,
}

--- @param opts (table|nil)
--- @return table
local get_opts = function(opts)
	local all_opts = opts
	if all_opts == nil then
		all_opts = {}
	end
	for k, v in pairs(default_opts) do
		all_opts[k] = all_opts[k] or v
	end
	return all_opts
end

--- @param vimmode (string|nil)
--- @return string
local get_mode = function(vimmode)
	local modeString = vim_modes[vimmode]
	if modeString == nil then
		return "n"
	else
		return modeString
	end
end

--- @param command (string)
--- @return string
local get_cmd_string = function(command)
	return [[<cmd>]] .. command .. [[<CR>]]
end

--- @param keymaps string
--- @param command string
--- @param vimmode (string|nil)
--- @param options (table|nil)
--- @return nil
local mapvimkey = function(keymaps, command, vimmode, options)
	local mode = get_mode(vimmode)
	local lhs = keymaps
	local rhs = get_cmd_string(command)
	local opts = get_opts(options)
	vim.keymap.set(mode, lhs, rhs, opts)
end

--- @param keymaps string
--- @param cmd (function|string)
--- @param desc (string|nil)
--- @return table
local maplazykey = function(keymaps, cmd, desc)
	if type(cmd) ~= "function" then
		cmd = get_cmd_string(cmd)
	end
	return { keymaps, cmd, desc = desc }
end

return {
	mapvimkey = mapvimkey,
	maplazykey = maplazykey,
}
################
# init.lua
# /home/ahmed/.config/nvim/lua/config/init.lua
################
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"

-- Modern Neovim (0.9+) compatible filesystem check
if vim.fn.empty(vim.fn.glob(lazypath)) > 0 then
    vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable",
    lazypath,
  })
end
-- Add Lazy to runtimepath
vim.opt.rtp:prepend(lazypath)

require("config.globals")
require("config.options")
require("config.keymaps")
require("config.autocmds")
require("config.helpers")

local plugins = "plugins"

local opts = {
	defaults = {
		lazy = true,
	},
	ui = {
		border = "rounded",
	},
	install = {
		colorscheme = { "carbonfox" },
	},
	rtp = {
		disabled_plugins = {
			"gzip",
			"matchit",
			"matchparen",
			"netrw",
			"netrwPlugin",
			"tarPlugin",
			"tohtml",
			"tutor",
			"zipPlugin",
		},
	},
   checker = { enabled = true },
	change_detection = {
		notify = false,
	},
  performance = {
    cache = {
        enabled = true,
    },
    reset_packpath = false, -- Prevents overriding packpath
  },
}


require("lazy").setup(plugins, opts or {})

################
# options.lua
# /home/ahmed/.config/nvim/lua/config/options.lua
################
local opt = vim.opt

-- Tab / Indentation
opt.tabstop = 2
opt.shiftwidth = 2
opt.softtabstop = 2
opt.expandtab = true
opt.smartindent = true
opt.wrap = false

-- Search
opt.incsearch = true
opt.ignorecase = true
opt.smartcase = true
opt.hlsearch = false

-- Appearance
opt.number = true
opt.relativenumber = true
opt.termguicolors = true
opt.colorcolumn = "100"
opt.signcolumn = "yes"
opt.cmdheight = 1
opt.scrolloff = 10
opt.completeopt = "menuone,noinsert,noselect"
opt.cursorline = true

-- Behaviour
opt.hidden = true
opt.errorbells = false
opt.swapfile = false
opt.backup = false
opt.undodir = vim.fn.expand("~/.vim/undodir")
opt.undofile = true
opt.backspace = "indent,eol,start"
opt.splitright = true
opt.splitbelow = true
opt.autochdir = false
opt.iskeyword:append("-")
opt.selection = "exclusive"
opt.mouse = "a"
opt.modifiable = true
opt.guicursor = "n-v-c:block,i-ci-ve:block,r-cr:hor20,o:hor50,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor,sm:block-blinkwait175-blinkoff150-blinkon175"
opt.encoding = "UTF-8"
opt.showmode = false

-- folds
opt.foldmethod = "expr"
opt.foldexpr = "nvim_treesitter#foldexpr()"
opt.foldlevel = 99

-- Reduce which-key timeout (default is 1000)
vim.o.timeoutlen = 500

-- Better for ops work:
opt.autoread = true       -- Auto-reload changed files
opt.backup = false        -- Disable backups (use git)
opt.swapfile = false      -- Disable swapfiles
opt.undofile = true       -- Persistent undo
opt.clipboard = "unnamedplus" -- System clipboard
################
# autocmds.lua
# /home/ahmed/.config/nvim/lua/config/autocmds.lua
################
-- auto-format on save
local lsp_fmt_group = vim.api.nvim_create_augroup("LspFormattingGroup", {})
vim.api.nvim_create_autocmd("BufWritePre", {
	group = lsp_fmt_group,
	callback = function()
		local efm = vim.lsp.get_clients({ name = "efm" })

		if vim.tbl_isempty(efm) then
			return
		end

		vim.lsp.buf.format({ name = "efm", async = true })
	end,
})

-- highlight on yank
local highlight_yank_group = vim.api.nvim_create_augroup("HighlightYankGroup", {})
vim.api.nvim_create_autocmd("TextYankPost", {
	group = highlight_yank_group,
	callback = function()
		vim.highlight.on_yank()
	end,
})
################
# globals.lua
# /home/ahmed/.config/nvim/lua/config/globals.lua
################
vim.g.mapleader = " "
vim.g.maplocalleader = " "
################
# keymaps.lua
# /home/ahmed/.config/nvim/lua/config/keymaps.lua
################
local mapkey = require("util.keymapper").mapvimkey

-- Buffer Navigation
mapkey("<leader>bn", "bnext", "n") -- Next buffer
mapkey("<leader>bp", "bprevious", "n") -- Prev buffer
mapkey("<leader>bb", "e #", "n") -- Switch to Other Buffer
mapkey("<leader>`", "e #", "n") -- Switch to Other Buffer

-- Directory Navigation
mapkey("<leader>m", "NvimTreeFocus", "n")
mapkey("<leader>e", "NvimTreeToggle", "n")

-- Pane and Window Navigation
mapkey("<C-h>", "<C-w>h", "n") -- Navigate Left
mapkey("<C-j>", "<C-w>j", "n") -- Navigate Down
mapkey("<C-k>", "<C-w>k", "n") -- Navigate Up
mapkey("<C-l>", "<C-w>l", "n") -- Navigate Right
mapkey("<C-h>", "wincmd h", "t") -- Navigate Left
mapkey("<C-j>", "wincmd j", "t") -- Navigate Down
mapkey("<C-k>", "wincmd k", "t") -- Navigate Up
mapkey("<C-l>", "wincmd l", "t") -- Navigate Right
mapkey("<C-h>", "TmuxNavigateLeft", "n") -- Navigate Left
mapkey("<C-j>", "TmuxNavigateDown", "n") -- Navigate Down
mapkey("<C-k>", "TmuxNavigateUp", "n") -- Navigate Up
mapkey("<C-l>", "TmuxNavigateRight", "n") -- Navigate Right

-- Window Management
mapkey("<leader>sv", "vsplit", "n") -- Split Vertically
mapkey("<leader>sh", "split", "n") -- Split Horizontally
mapkey("<C-Up>", "resize +2", "n")
mapkey("<C-Down>", "resize -2", "n")
mapkey("<C-Left>", "vertical resize +2", "n")
mapkey("<C-Right>", "vertical resize -2", "n")

-- Show Full File-Path
mapkey("<leader>pa", "ShowPath", "n") -- Show Full File Path

-- Indenting
vim.keymap.set("v", "<", "<gv", { silent = true, noremap = true })
vim.keymap.set("v", ">", ">gv", { silent = true, noremap = true })

local api = vim.api

-- Comments

if vim.env.TMUX ~= nil then
	api.nvim_set_keymap("n", "<C-_>", "gtc", { noremap = false })
	api.nvim_set_keymap("v", "<C-_>", "goc", { noremap = false })
else
	api.nvim_set_keymap("n", "<C-/>", "gtc", { noremap = false })
	api.nvim_set_keymap("v", "<C-/>", "goc", { noremap = false })
end

-- Fast file switching
mapkey("<leader>fs", ":Telescope find_files hidden=true<CR>", "n")
-- Grep in hidden files (great for configs)
mapkey("<leader>fh", ":Telescope live_grep hidden=true<CR>", "n")
-- Fast log viewing
mapkey("<leader>lg", ":Telescope live_grep search=error<CR>", "n")

-- Kubernetes pod logs
mapkey("<leader>kl", ":!kubectl logs -f <pod><CR>", "n")

-- Terraform apply/destroy
mapkey("<leader>ta", ":!terraform apply<CR>", "n")
mapkey("<leader>td", ":!terraform destroy<CR>", "n")

-- Docker compose control
mapkey("<leader>dc", ":!docker-compose up -d<CR>", "n")

-- Floaterm
mapkey("<C-\\>", ":FloatermToggle<CR>", "n")

-- Vim-eunuch (Unix commands)
mapkey("<leader>mv", ":Rename ", "n")
mapkey("<leader>rm", ":Delete<CR>", "n")
################
# helpers.lua
# /home/ahmed/.config/nvim/lua/config/helpers.lua
################
local function show_path()
	local current_path = vim.fn.expand("%:p")
	print("Current Path: " .. current_path)
end

vim.api.nvim_create_user_command("ShowPath", show_path, { nargs = "?" })
################
# init.lua
# /home/ahmed/.config/nvim/lua/plugins/init.lua
################
return {
    { "folke/lazy.nvim" }, -- Ensure Lazy.nvim is explicitly loaded
    { "folke/neoconf.nvim", cmd = "Neoconf" },
    "folke/neodev.nvim",
}
################
# ansible.lua
# /home/ahmed/.config/nvim/lua/plugins/ansible.lua
################
return {
  "pearofducks/ansible-vim",
  ft = { "yaml.ansible" },
}
################
# theme.lua
# /home/ahmed/.config/nvim/lua/plugins/theme.lua
################
return {
	{
		"xiyaowong/nvim-transparent",
		lazy = false,
		priority = 999,
	},
	{
		"EdenEast/nightfox.nvim",
		lazy = false,
		priority = 1000,
		config = function()
			local palette = require("nightfox.palette").load("carbonfox")
			require("nightfox").setup({
				options = { transparent = true },
				groups = {
					all = {
						TelescopeBorder = { fg = palette.fg3 },
					},
					nightfox = {
						Visual = { bg = palette.bg1 },
					},
				},
			})
			vim.cmd.colorscheme("carbonfox")
		end,
	},
}
################
# gitsigns-nvim.lua
# /home/ahmed/.config/nvim/lua/plugins/gitsigns-nvim.lua
################
return {
  "lewis6991/gitsigns.nvim",
  lazy = false,
  config = function()
    require("gitsigns").setup()
  end
}
################
# nvim-autopairs.lua
# /home/ahmed/.config/nvim/lua/plugins/nvim-autopairs.lua
################
return {
	"windwp/nvim-autopairs",
	event = "InsertEnter",
	opts = {}, -- this is equalent to setup({}) function
}
################
# lspsaga-nvim.lua
# /home/ahmed/.config/nvim/lua/plugins/lspsaga-nvim.lua
################
return {
	"glepnir/lspsaga.nvim",
	lazy = false,
	config = function()
		require("lspsaga").setup({
			-- keybinds for navigation in lspsaga window
			move_in_saga = { prev = "<C-k>", next = "<C-j>" },
			-- use enter to open file with finder
			finder_action_keys = {
				open = "<CR>",
			},
			-- use enter to open file with definition preview
			definition_action_keys = {
				edit = "<CR>",
			},
		})
	end,
	dependencies = {
		"nvim-treesitter/nvim-treesitter",
	},
}
################
# comment.lua
# /home/ahmed/.config/nvim/lua/plugins/comment.lua
################
return {
	"numToStr/Comment.nvim",
	opts = {
		toggler = {
			line = "gtc",
			block = "gtb",
		},
		opleader = {
			line = "goc",
			block = "gob",
		},
	},
	lazy = false,
}
################
# nvim-lspconfig.lua
# /home/ahmed/.config/nvim/lua/plugins/nvim-lspconfig.lua
################
local on_attach = require("util.lsp").on_attach
local diagnostic_signs = require("util.icons").diagnostic_signs
local typescript_organise_imports = require("util.lsp").typescript_organise_imports

local config = function()
	require("neoconf").setup({})
	local cmp_nvim_lsp = require("cmp_nvim_lsp")
	local lspconfig = require("lspconfig")
	local capabilities = cmp_nvim_lsp.default_capabilities()

	-- solidity
	lspconfig.solidity_ls.setup({
		capabilities = capabilities,
		on_attach = on_attach,
		filetypes = { "solidity" },
		root_dir = lspconfig.util.root_pattern("hardhat.config.*", ".git"),
	})

	-- lua
	lspconfig.lua_ls.setup({
		capabilities = capabilities,
		on_attach = on_attach,
		settings = { -- custom settings for lua
			Lua = {
				-- make the language server recognize "vim" global
				diagnostics = {
					globals = { "vim" },
				},
				workspace = {
					library = {
						vim.fn.expand("$VIMRUNTIME/lua"),
						vim.fn.expand("$XDG_CONFIG_HOME") .. "/nvim/lua",
					},
				},
			},
		},
	})

	-- json
	lspconfig.jsonls.setup({
		capabilities = capabilities,
		on_attach = on_attach,
		filetypes = { "json", "jsonc" },
	})

	-- python
	lspconfig.pyright.setup({
		capabilities = capabilities,
		on_attach = on_attach,
		settings = {
			pyright = {
				disableOrganizeImports = false,
				analysis = {
					useLibraryCodeForTypes = true,
					autoSearchPaths = true,
					diagnosticMode = "workspace",
					autoImportCompletions = true,
				},
			},
		},
	})

	-- bash
	lspconfig.bashls.setup({
		capabilities = capabilities,
		on_attach = on_attach,
		filetypes = { "sh", "aliasrc" },
	})

	-- typescriptreact, javascriptreact, css, sass, scss, less, svelte, vue
	lspconfig.emmet_ls.setup({
		capabilities = capabilities,
		on_attach = on_attach,
		filetypes = {
			"typescriptreact",
			"javascriptreact",
			"javascript",
			"css",
			"sass",
			"scss",
			"less",
			"svelte",
			"vue",
			"html",
		},
	})

	-- docker
	lspconfig.dockerls.setup({
		capabilities = capabilities,
		on_attach = on_attach,
	})

	-- C/C++
	lspconfig.clangd.setup({
		capabilities = capabilities,
		on_attach = on_attach,
		cmd = {
			"clangd",
			"--offset-encoding=utf-16",
		},
	})

	for type, icon in pairs(diagnostic_signs) do
		local hl = "DiagnosticSign" .. type
		vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = "" })
	end

	local solhint = require("efmls-configs.linters.solhint")
	local prettier_d = require("efmls-configs.formatters.prettier_d")
	local luacheck = require("efmls-configs.linters.luacheck")
	local stylua = require("efmls-configs.formatters.stylua")
	local flake8 = require("efmls-configs.linters.flake8")
	local black = require("efmls-configs.formatters.black")
	local eslint = require("efmls-configs.linters.eslint")
	local fixjson = require("efmls-configs.formatters.fixjson")
	local shellcheck = require("efmls-configs.linters.shellcheck")
	local shfmt = require("efmls-configs.formatters.shfmt")
	local hadolint = require("efmls-configs.linters.hadolint")
	local cpplint = require("efmls-configs.linters.cpplint")
	local clangformat = require("efmls-configs.formatters.clang_format")

	-- configure efm server
	lspconfig.efm.setup({
		filetypes = {
			"solidity",
			"lua",
			"python",
			"json",
			"jsonc",
			"sh",
			"javascript",
			"javascriptreact",
			"typescript",
			"typescriptreact",
			"svelte",
			"vue",
			"markdown",
			"docker",
			"html",
			"css",
			"c",
			"cpp",
		},
		init_options = {
			documentFormatting = true,
			documentRangeFormatting = true,
			hover = true,
			documentSymbol = true,
			codeAction = true,
			completion = true,
		},
		settings = {
			languages = {
				solidity = { solhint, prettier_d },
				lua = { luacheck, stylua },
				python = { flake8, black },
				typescript = { eslint, prettier_d },
				json = { eslint, fixjson },
				jsonc = { eslint, fixjson },
				sh = { shellcheck, shfmt },
				javascript = { eslint, prettier_d },
				javascriptreact = { eslint, prettier_d },
				typescriptreact = { eslint, prettier_d },
				svelte = { eslint, prettier_d },
				vue = { eslint, prettier_d },
				markdown = { prettier_d },
				docker = { hadolint, prettier_d },
				html = { prettier_d },
				css = { prettier_d },
				c = { clangformat, cpplint },
				cpp = { clangformat, cpplint },
			},
		},
	})
end

return {
	"neovim/nvim-lspconfig",
	config = config,
	lazy = false,
	dependencies = {
		"windwp/nvim-autopairs",
		"williamboman/mason.nvim",
		"creativenull/efmls-configs-nvim",
		"hrsh7th/nvim-cmp",
		"hrsh7th/cmp-buffer",
		"hrsh7th/cmp-nvim-lsp",
	},
}
################
# tmux-navigator.lua
# /home/ahmed/.config/nvim/lua/plugins/tmux-navigator.lua
################
return {
  "christoomey/vim-tmux-navigator",
  lazy = false,
}
################
# vim-fugitive.lua
# /home/ahmed/.config/nvim/lua/plugins/vim-fugitive.lua
################
return {
	lazy = false,
	"tpope/vim-fugitive",
}
################
# telescope.lua
# /home/ahmed/.config/nvim/lua/plugins/telescope.lua
################
local keys = {
	{ "<leader>/", "<cmd>Telescope current_buffer_fuzzy_find<cr>", desc = "Buffer search" },
	{ "<leader>fb", "<cmd>Telescope buffers<cr>", desc = "Buffers" },
	{ "<leader>fc", "<cmd>Telescope git_commits<cr>", desc = "Commits" },
	{ "<leader>ff", "<cmd>Telescope find_files<cr>", desc = "Find All Files" },
	{ "<C-p>", "<cmd>Telescope git_files<cr>", desc = "Git files" },
	{ "<leader>fh", "<cmd>Telescope help_tags<cr>", desc = "Help" },
	{ "<leader>fj", "<cmd>Telescope command_history<cr>", desc = "History" },
	{ "<leader>fk", "<cmd>Telescope keymaps<cr>", desc = "Keymaps" },
	{ "<leader>fl", "<cmd>Telescope lsp_references<cr>", desc = "Lsp References" },
	{ "<leader>fo", "<cmd>Telescope oldfiles<cr>", desc = "Old files" },
	{ "<leader>fg", "<cmd>Telescope live_grep<cr>", desc = "Ripgrep" },
	{ "<leader>fs", "<cmd>Telescope grep_string<cr>", desc = "Grep String" },
	{ "<leader>ft", "<cmd>Telescope treesitter<cr>", desc = "Treesitter" },
}

local config = function()
	local telescope = require("telescope")
	telescope.setup({
		defaults = {
			mappings = {
				i = {
					["<C-j>"] = "move_selection_next",
					["<C-k>"] = "move_selection_previous",
				},
			},
		},
		pickers = {
			live_grep = {
				file_ignore_patterns = { "node_modules", ".venv", "%.git", "%.cache", "__pycache__", "%.o", "%.out","%.class", "%.pdf", "%.mkv", "%.mp4", "%.zip" },
				additional_args = function(_)
					return { "--hidden", "--no-ignore-vcs" }
				end,
				hidden = true,
				no_ignore = true,
			},
			find_files = {
				file_ignore_patterns = { "node_modules", ".venv" },
				additional_args = function(_)
					return { "--hidden", "--no-ignore-vcs" }
				end,
				no_ignore = true,
				hidden = true,
			},
		},
		extensions = {
			"fzf",
		},
	})
	telescope.load_extension("fzf")
end

return {
	"nvim-telescope/telescope.nvim",
	dependencies = {
		{ "nvim-lua/plenary.nvim" },
		{
			"nvim-telescope/telescope-fzf-native.nvim",
			build = "make",
		},
	},
	keys = keys,
	config = config,
}
################
# whichkey.lua
# /home/ahmed/.config/nvim/lua/plugins/whichkey.lua
################
return {
	"folke/which-key.nvim",
	lazy = false,
	opts = {},
}
################
# kubernetes.lua
# /home/ahmed/.config/nvim/lua/plugins/kubernetes.lua
################
return {
  "andrewstuart/vim-kubernetes",
  ft = { "yaml", "yml" },
  dependencies = {
    "towolf/vim-helm" -- Helm chart support
  }
}
################
# database.lua
# /home/ahmed/.config/nvim/lua/plugins/database.lua
################
return {
  "tpope/vim-dadbod",
  "kristijanhusak/vim-dadbod-ui",
  cmd = { "DBUI", "DB" },
  config = function()
    vim.g.db_ui_use_nerd_fonts = 1
  end
}
################
# lualine-nvim.lua
# /home/ahmed/.config/nvim/lua/plugins/lualine-nvim.lua
################
local config = function()
	local palette = require("nightfox.palette").load("carbonfox")
	local custom_nightfox = require("lualine.themes.nightfox")
	custom_nightfox.normal.b.bg = palette.bg0

	require("lualine").setup({
		options = {
			theme = custom_nightfox,
			globalstatus = true,
			component_separators = { left = "|", right = "|" },
			section_separators = { left = "", right = "" },
		},
		sections = {
			lualine_a = { "mode" },
			lualine_b = { "buffers" },
			lualine_x = { "encoding", "fileformat", "filetype", "progress" },
			lualine_y = { "" },
			lualine_z = { "location" },
		},
		tabline = {},
	})
end

return {
	"nvim-lualine/lualine.nvim",
	lazy = false,
	config = config,
}
################
# nvim-nio.lua
# /home/ahmed/.config/nvim/lua/plugins/nvim-nio.lua
################
return { 'nvim-neotest/nvim-nio' }
################
# trouble-nvim.lua
# /home/ahmed/.config/nvim/lua/plugins/trouble-nvim.lua
################
local diagnostic_signs = require("util.icons").diagnostic_signs
local maplazykey = require("util.keymapper").maplazykey

return {
	"folke/trouble.nvim",
	dependencies = { "nvim-tree/nvim-web-devicons" },
	opts = {
		signs = {
			-- icons / text used for a diagnostic
			error = diagnostic_signs.Error,
			warning = diagnostic_signs.Warn,
			hint = diagnostic_signs.Hint,
			information = diagnostic_signs.Info,
			other = diagnostic_signs.Info,
		},
	},
	keys = {
		maplazykey("<leader>xx", function()
			require("trouble").toggle()
		end, "Toggle Trouble"),
		maplazykey("<leader>xw", function()
			require("trouble").toggle("workspace_diagnostics")
		end, "Show Workspace Diagnostics"),
		maplazykey("<leader>xd", function()
			require("trouble").toggle("document_diagnostics")
		end, "Show Document Diagnostics"),
		maplazykey("<leader>xq", function()
			require("trouble").toggle("quickfix")
		end, "Toggle Quickfix List"),
		maplazykey("<leader>xl", function()
			require("trouble").toggle("loclist")
		end, "Toggle Location List"),
		maplazykey("gR", function()
			require("trouble").toggle("lsp_references")
		end, "Toggle LSP References"),
	},
}
################
# vim-illuminate.lua
# /home/ahmed/.config/nvim/lua/plugins/vim-illuminate.lua
################
return {
	"RRethy/vim-illuminate",
	lazy = false,
	config = function()
		require("illuminate").configure({})
	end,
}
################
# copilot.lua
# /home/ahmed/.config/nvim/lua/plugins/copilot.lua
################
return {
  "zbirenbaum/copilot.lua",
  cmd = "Copilot",
  event = "InsertEnter",
  config = function()
    require("copilot").setup({
      suggestion = { enabled = false },
      panel = { enabled = false },
    })
  end,
}
################
# terraform.lua
# /home/ahmed/.config/nvim/lua/plugins/terraform.lua
################
return {
  "hashivim/vim-terraform",
  ft = { "terraform", "tf", "hcl" },
  config = function()
    vim.g.terraform_fmt_on_save = 1 -- Auto-format
  end
}
################
# nvim-tree.lua
# /home/ahmed/.config/nvim/lua/plugins/nvim-tree.lua
################
return {
  "nvim-tree/nvim-tree.lua",
  cmd = { "NvimTreeToggle", "NvimTreeFocus" },
  config = function()
    require("nvim-tree").setup({
      view = {
        adaptive_size = true,
        side = "left",
        width = 30,
      },
      renderer = {
        highlight_git = true,  -- Highlight Git changes
        icons = {
          show = {
            git = true, -- Show Git icons
            folder = true,
            file = true,
          },
        },
      },
    })
  end
}

################
# nvim-cmp.lua
# /home/ahmed/.config/nvim/lua/plugins/nvim-cmp.lua
################
return {
	"hrsh7th/nvim-cmp",
	config = function()
		local cmp = require("cmp")
		local luasnip = require("luasnip")
		local lspkind = require("lspkind")

		require("luasnip/loaders/from_vscode").lazy_load()

		vim.opt.completeopt = "menu,menuone,noselect"

		cmp.setup({
			snippet = {
				expand = function(args)
					luasnip.lsp_expand(args.body)
				end,
			},
			mapping = cmp.mapping.preset.insert({
				["<C-k>"] = cmp.mapping.select_prev_item(), -- previous suggestion
				["<C-j>"] = cmp.mapping.select_next_item(), -- next suggestion
				["<C-b>"] = cmp.mapping.scroll_docs(-4),
				["<C-f>"] = cmp.mapping.scroll_docs(4),
				["<C-Space>"] = cmp.mapping.complete(), -- show completion suggestions
				["<C-e>"] = cmp.mapping.abort(), -- close completion window
				["<CR>"] = cmp.mapping.confirm({ select = false }),
			}),
			-- sources for autocompletion
			sources = cmp.config.sources({
				{ name = "nvim_lsp" }, -- lsp
				{ name = "luasnip" }, -- snippets
				{ name = "buffer" }, -- text within current buffer
				{ name = "path" }, -- file system paths
			}),
			-- configure lspkind for vs-code like icons
			formatting = {
				format = lspkind.cmp_format({
					maxwidth = 50,
					ellipsis_char = "...",
				}),
			},
		})
	end,
	dependencies = {
		"onsails/lspkind.nvim",
		{

			"L3MON4D3/LuaSnip",
			-- follow latest release.
			version = "2.*", -- Replace <CurrentMajor> by the latest released major (first number of latest release)
			-- install jsregexp (optional!).
			build = "make install_jsregexp",
		},
	},
}
################
# nvim-dap.lua
# /home/ahmed/.config/nvim/lua/plugins/nvim-dap.lua
################
local debugging_signs = require("util.icons").debugging_signs

return {
	"mfussenegger/nvim-dap",
	config = function()
		local dap = require("dap")
		local dapui = require("dapui")

		-- set custom icons
		for name, sign in pairs(debugging_signs) do
			sign = type(sign) == "table" and sign or { sign }
			vim.fn.sign_define(
				"Dap" .. name,
				{ text = sign[1], texthl = sign[2] or "DiagnosticInfo", linehl = sign[3], numhl = sign[3] }
			)
		end

		-- setup dap
		dapui.setup()

		-- add event listeners
		dap.listeners.after.event_initialized["dapui_config"] = function()
			dapui.open()
			vim.cmd("Hardtime disable")
			vim.cmd("NvimTreeClose")
		end

		dap.listeners.before.event_terminated["dapui_config"] = function()
			dapui.close()
			vim.cmd("Hardtime enable")
		end

		dap.listeners.before.event_exited["dapui_config"] = function()
			dapui.close()
			vim.cmd("Hardtime enable")
		end
    dap.adapters.node2 = {
      type = 'executable',
      command = 'node',
      args = { os.getenv('HOME') .. '/path/to/vscode-node-debug2/out/src/nodeDebug.js' }
    }

    dap.configurations.javascript = {
      {
        name = 'Launch',
        type = 'node2',
        request = 'launch',
        program = '${file}',
        cwd = vim.fn.getcwd(),
        sourceMaps = true,
        protocol = 'inspector',
        console = 'integratedTerminal',
      }
    }
    dap.adapters.delve = {
      type = "server",
      port = "${port}",
      executable = {
        command = "dlv",
        args = { "dap", "-l", "127.0.0.1:${port}" },
      }
    }

    dap.configurations.go = {
      {
        type = "delve",
        name = "Debug",
        request = "launch",
        program = "${file}"
      }
    }
	end,
	dependencies = "rcarriga/nvim-dap-ui",
}
################
# wakatime.lua
# /home/ahmed/.config/nvim/lua/plugins/wakatime.lua
################
return { 'wakatime/vim-wakatime', lazy = false }
################
# nvim-ts-autotag.lua
# /home/ahmed/.config/nvim/lua/plugins/nvim-ts-autotag.lua
################
return {
	"windwp/nvim-ts-autotag",
	lazy = false,
}
################
# mason-lspconfig.lua
# /home/ahmed/.config/nvim/lua/plugins/mason-lspconfig.lua
################
local mason = {
	"williamboman/mason.nvim",
	cmd = "Mason",
	event = "BufReadPre",
	opts = {
		ui = {
			icons = {
				package_installed = "✓",
				package_pending = "➜",
				package_uninstalled = "✗",
			},
		},
	},
}

local mason_lspconfig = {
	"williamboman/mason-lspconfig.nvim",
	opts = {
		ensure_installed = {
			"solidity_ls",
			"efm",
			"bashls",
			"pyright",
			"lua_ls",
			"emmet_ls",
			"jsonls",
			"clangd",
			"dockerls",
      "terraformls", -- Terraform
      "ansiblels",   -- Ansible
      "jsonls",      -- JSON (for AWS CF, k8s)
      "yamlls",      -- YAML (with k8s schema)
      "gopls",       -- Go (for cloud-native dev)
		},
		automatic_installation = true,
	},
	event = "BufReadPre",
	dependencies = "williamboman/mason.nvim",
}

return {
	mason,
	mason_lspconfig,
}
################
# rust-tools-nvim.lua
# /home/ahmed/.config/nvim/lua/plugins/rust-tools-nvim.lua
################
local on_attach = require("util.lsp").on_attach

return {
	"simrat39/rust-tools.nvim",
	ft = "rust",
	config = function()
		local rt = require("rust-tools")
		local cmp_nvim_lsp = require("cmp_nvim_lsp")
		local capabilities = cmp_nvim_lsp.default_capabilities()
		rt.setup({
			server = {
				on_attach = on_attach,
				capabilities = capabilities,
			},
		})
	end,
	dependencies = {
		"neovim/nvim-lspconfig",
		"nvim-lua/plenary.nvim",
		"mfussenegger/nvim-dap",
	},
}
################
# markdown-preview.lua
# /home/ahmed/.config/nvim/lua/plugins/markdown-preview.lua
################
return {
	"iamcco/markdown-preview.nvim",
	cmd = { "MarkdownPreviewToggle", "MarkdownPreview", "MarkdownPreviewStop" },
	ft = { "markdown" },
	build = function()
		vim.fn["mkdp#util#install"]()
	end,
}
################
# nvim-dap-python.lua
# /home/ahmed/.config/nvim/lua/plugins/nvim-dap-python.lua
################
return {
	"mfussenegger/nvim-dap-python",
	ft = "python", -- filetype
	config = function()
		require("dap-python").setup("~/.local/share/nvim/mason/packages/debugpy/venv/bin/python")
	end,
	dependencies = {
		"mfussenegger/nvim-dap",
		"rcarriga/nvim-dap-ui",
	},
}
################
# nvim-web-devicons.lua
# /home/ahmed/.config/nvim/lua/plugins/nvim-web-devicons.lua
################
return {
  "nvim-tree/nvim-web-devicons",
  lazy = true, -- Load it only when needed
  config = function()
    require("nvim-web-devicons").setup {
      override = {},
      default = true,
    }
  end
}
################
# indent-blankline.lua
# /home/ahmed/.config/nvim/lua/plugins/indent-blankline.lua
################
return {
  "lukas-reineke/indent-blankline.nvim",
  main = "ibl",
  lazy = false,
  opts = {
    scope = { enabled = false }, -- Disable scope highlighting
    indent = {
      char = "│", -- Use a better character for indentation
    },
    exclude = {
      filetypes = { "help", "dashboard", "NvimTree", "Trouble", "lazy" }, -- Don't show indent lines in these
    },
  },
}

################
# cli.lua
# /home/ahmed/.config/nvim/lua/plugins/cli.lua
################
return {
  "tpope/vim-eunuch",
  "mhinz/vim-startify",
  "chrisbra/csv.vim",
  "voldikss/vim-floaterm",
  config = function()
    vim.g.floaterm_width = 0.8
  end
}
################
# nvim-treesitter.lua
# /home/ahmed/.config/nvim/lua/plugins/nvim-treesitter.lua
################
local config = function()
	require("nvim-treesitter.configs").setup({
		build = ":TSUpdate",
		indent = {
			enable = true,
		},
		autotag = {
			enable = true,
		},
		event = {
			"BufReadPre",
			"BufNewFile",
		},
		ensure_installed = {
			"vim",
			"regex",
			"rust",
			"markdown",
			"json",
			"javascript",
			"typescript",
			"yaml",
			"html",
			"css",
			"markdown",
			"bash",
			"lua",
			"dockerfile",
			"solidity",
			"gitignore",
			"python",
			"vue",
			"svelte",
			"toml",
		},
		auto_install = true,
		highlight = {
			enable = true,
			additional_vim_regex_highlighting = true,
		},
		incremental_selection = {
			enable = true,
			keymaps = {
				init_selection = "<C-s>",
				node_incremental = "<C-s>",
				scope_incremental = false,
				node_decremental = "<BS>",
			},
		},
	})
end

return {
	"nvim-treesitter/nvim-treesitter",
	lazy = false,
	config = config,
}
################
# noice.lua
# /home/ahmed/.config/nvim/lua/plugins/noice.lua
################
return {
	"folke/noice.nvim",
	event = "VeryLazy",
	opts = {
		routes = {
			{
				view = "notify",
				filter = { event = "msg_showmode" },
			},
		},
		lsp = {
			-- override markdown rendering so that **cmp** and other plugins use **Treesitter**
			override = {
				["vim.lsp.util.convert_input_to_markdown_lines"] = true,
				["vim.lsp.util.stylize_markdown"] = true,
				["cmp.entry.get_documentation"] = true,
			},
		},
		-- you can enable a preset for easier configuration
		presets = {
			bottom_search = true, -- use a classic bottom cmdline for search
			command_palette = true, -- position the cmdline and popupmenu together
			long_message_to_split = true, -- long messages will be sent to a split
			inc_rename = false, -- enables an input dialog for inc-rename.nvim
			lsp_doc_border = false, -- add a border to hover docs and signature help
		},
	},
	dependencies = {
		-- if you lazy-load any plugin below, make sure to add proper `module="..."` entries
		"MunifTanjim/nui.nvim",
		-- OPTIONAL:
		--   `nvim-notify` is only needed, if you want to use the notification view.
		--   If not available, we use `mini` as the fallback
		{
			"rcarriga/nvim-notify",
			opts = {
				timeout = 3000,
				render = "compact",
				top_down = false,
				background_colour = "#000000",
				fade_in_slide_out = true,
			},
		},
	},
}
################
# .luarc.json
# /home/ahmed/.config/nvim/.luarc.json
################
{
    "diagnostics.globals": [
        "vim"
    ],
    "diagnostics.disable": [
        "different-requires",
        "missing-fields"
    ]
}
################
# neoconf.json
# /home/ahmed/.config/nvim/neoconf.json
################
{
  "neodev": {
    "library": {
      "enabled": true,
      "plugins": true
    }
  },
  "neoconf": {
    "plugins": {
      "lua_ls": {
        "enabled": true
      }
    }
  }
}
